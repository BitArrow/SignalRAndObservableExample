@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<h3>Single time</h3>
<p>Current server time is: @_serverTime</p>
<p>Current UTC time is: @_utcTime</p>

<h3>Combined time</h3>

<p>Current server time is: @_combinedTime.CurrentTime</p>
<p>Current UTC time is: @_combinedTime.UtcTime</p>

@code {
    private HubConnection? hubConnection;

    private string _serverTime = string.Empty;
    private string _utcTime = string.Empty;
    private TimeModel _combinedTime = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/clockhub"))
            .Build();

        hubConnection.On<string>("ReceiveTime", (time) =>
        {
            _serverTime = time;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("ReceiveUtcTime", (utcTime) =>
        {
            _utcTime = utcTime;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<TimeModel>("ReceiveCombinedTime", (combinedTime) =>
        {
            _combinedTime = combinedTime;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }



    public class TimeModel
    {
        public string? CurrentTime { get; set; }

        public string? UtcTime { get; set; }
    }
}